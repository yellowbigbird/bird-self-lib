// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgFile.proto

#ifndef PROTOBUF_msgFile_2eproto__INCLUDED
#define PROTOBUF_msgFile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#include "..\comDll.h"
#pragma warning(disable:4275)
#pragma warning(disable:4251)

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msgFile_2eproto();
void protobuf_AssignDesc_msgFile_2eproto();
void protobuf_ShutdownFile_msgFile_2eproto();

class MsgFile;

enum MsgFile_TYPE {
  MsgFile_TYPE_FILE = 0,
  MsgFile_TYPE_DIR = 1,
  MsgFile_TYPE_NotExist = 2
};
bool MsgFile_TYPE_IsValid(int value);
const MsgFile_TYPE MsgFile_TYPE_TYPE_MIN = MsgFile_TYPE_FILE;
const MsgFile_TYPE MsgFile_TYPE_TYPE_MAX = MsgFile_TYPE_NotExist;
const int MsgFile_TYPE_TYPE_ARRAYSIZE = MsgFile_TYPE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgFile_TYPE_descriptor();
inline const ::std::string& MsgFile_TYPE_Name(MsgFile_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgFile_TYPE_descriptor(), value);
}
inline bool MsgFile_TYPE_Parse(
    const ::std::string& name, MsgFile_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgFile_TYPE>(
    MsgFile_TYPE_descriptor(), name, value);
}
// ===================================================================

class MsgFile : public ::google::protobuf::Message {
 public:
  MsgFile();
  virtual ~MsgFile();

  MsgFile(const MsgFile& from);

  inline MsgFile& operator=(const MsgFile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgFile& default_instance();

  void Swap(MsgFile* other);

  // implements Message ----------------------------------------------

  MsgFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgFile& from);
  void MergeFrom(const MsgFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MsgFile_TYPE TYPE;
  static const TYPE FILE = MsgFile_TYPE_FILE;
  static const TYPE DIR = MsgFile_TYPE_DIR;
  static const TYPE NotExist = MsgFile_TYPE_NotExist;
  static inline bool TYPE_IsValid(int value) {
    return MsgFile_TYPE_IsValid(value);
  }
  static const TYPE TYPE_MIN =
    MsgFile_TYPE_TYPE_MIN;
  static const TYPE TYPE_MAX =
    MsgFile_TYPE_TYPE_MAX;
  static const int TYPE_ARRAYSIZE =
    MsgFile_TYPE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TYPE_descriptor() {
    return MsgFile_TYPE_descriptor();
  }
  static inline const ::std::string& TYPE_Name(TYPE value) {
    return MsgFile_TYPE_Name(value);
  }
  static inline bool TYPE_Parse(const ::std::string& name,
      TYPE* value) {
    return MsgFile_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .MsgFile.TYPE fileType = 1;
  inline bool has_filetype() const;
  inline void clear_filetype();
  static const int kFileTypeFieldNumber = 1;
  inline ::MsgFile_TYPE filetype() const;
  inline void set_filetype(::MsgFile_TYPE value);

  // required string fileName = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional uint64 fileSize = 3;
  inline bool has_filesize() const;
  inline void clear_filesize();
  static const int kFileSizeFieldNumber = 3;
  inline ::google::protobuf::uint64 filesize() const;
  inline void set_filesize(::google::protobuf::uint64 value);

  // optional int64 fileTime = 4;
  inline bool has_filetime() const;
  inline void clear_filetime();
  static const int kFileTimeFieldNumber = 4;
  inline ::google::protobuf::int64 filetime() const;
  inline void set_filetime(::google::protobuf::int64 value);

  // required bool file7z = 5;
  inline bool has_file7z() const;
  inline void clear_file7z();
  static const int kFile7ZFieldNumber = 5;
  inline bool file7z() const;
  inline void set_file7z(bool value);

  // optional string filePathName = 9;
  inline bool has_filepathname() const;
  inline void clear_filepathname();
  static const int kFilePathNameFieldNumber = 9;
  inline const ::std::string& filepathname() const;
  inline void set_filepathname(const ::std::string& value);
  inline void set_filepathname(const char* value);
  inline void set_filepathname(const char* value, size_t size);
  inline ::std::string* mutable_filepathname();
  inline ::std::string* release_filepathname();
  inline void set_allocated_filepathname(::std::string* filepathname);

  // optional string fileData = 10;
  inline bool has_filedata() const;
  inline void clear_filedata();
  static const int kFileDataFieldNumber = 10;
  inline const ::std::string& filedata() const;
  inline void set_filedata(const ::std::string& value);
  inline void set_filedata(const char* value);
  inline void set_filedata(const char* value, size_t size);
  inline ::std::string* mutable_filedata();
  inline ::std::string* release_filedata();
  inline void set_allocated_filedata(::std::string* filedata);

  // @@protoc_insertion_point(class_scope:MsgFile)
 private:
  inline void set_has_filetype();
  inline void clear_has_filetype();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_filesize();
  inline void clear_has_filesize();
  inline void set_has_filetime();
  inline void clear_has_filetime();
  inline void set_has_file7z();
  inline void clear_has_file7z();
  inline void set_has_filepathname();
  inline void clear_has_filepathname();
  inline void set_has_filedata();
  inline void clear_has_filedata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* filename_;
  ::google::protobuf::uint64 filesize_;
  int filetype_;
  bool file7z_;
  ::google::protobuf::int64 filetime_;
  ::std::string* filepathname_;
  ::std::string* filedata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_msgFile_2eproto();
  friend void protobuf_AssignDesc_msgFile_2eproto();
  friend void protobuf_ShutdownFile_msgFile_2eproto();

  void InitAsDefaultInstance();
  static MsgFile* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgFile

// required .MsgFile.TYPE fileType = 1;
inline bool MsgFile::has_filetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgFile::set_has_filetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgFile::clear_has_filetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgFile::clear_filetype() {
  filetype_ = 0;
  clear_has_filetype();
}
inline ::MsgFile_TYPE MsgFile::filetype() const {
  return static_cast< ::MsgFile_TYPE >(filetype_);
}
inline void MsgFile::set_filetype(::MsgFile_TYPE value) {
  assert(::MsgFile_TYPE_IsValid(value));
  set_has_filetype();
  filetype_ = value;
}

// required string fileName = 2;
inline bool MsgFile::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgFile::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgFile::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgFile::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& MsgFile::filename() const {
  return *filename_;
}
inline void MsgFile::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void MsgFile::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void MsgFile::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgFile::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* MsgFile::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgFile::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 fileSize = 3;
inline bool MsgFile::has_filesize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgFile::set_has_filesize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgFile::clear_has_filesize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgFile::clear_filesize() {
  filesize_ = GOOGLE_ULONGLONG(0);
  clear_has_filesize();
}
inline ::google::protobuf::uint64 MsgFile::filesize() const {
  return filesize_;
}
inline void MsgFile::set_filesize(::google::protobuf::uint64 value) {
  set_has_filesize();
  filesize_ = value;
}

// optional int64 fileTime = 4;
inline bool MsgFile::has_filetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgFile::set_has_filetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgFile::clear_has_filetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgFile::clear_filetime() {
  filetime_ = GOOGLE_LONGLONG(0);
  clear_has_filetime();
}
inline ::google::protobuf::int64 MsgFile::filetime() const {
  return filetime_;
}
inline void MsgFile::set_filetime(::google::protobuf::int64 value) {
  set_has_filetime();
  filetime_ = value;
}

// required bool file7z = 5;
inline bool MsgFile::has_file7z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgFile::set_has_file7z() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgFile::clear_has_file7z() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgFile::clear_file7z() {
  file7z_ = false;
  clear_has_file7z();
}
inline bool MsgFile::file7z() const {
  return file7z_;
}
inline void MsgFile::set_file7z(bool value) {
  set_has_file7z();
  file7z_ = value;
}

// optional string filePathName = 9;
inline bool MsgFile::has_filepathname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgFile::set_has_filepathname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgFile::clear_has_filepathname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgFile::clear_filepathname() {
  if (filepathname_ != &::google::protobuf::internal::kEmptyString) {
    filepathname_->clear();
  }
  clear_has_filepathname();
}
inline const ::std::string& MsgFile::filepathname() const {
  return *filepathname_;
}
inline void MsgFile::set_filepathname(const ::std::string& value) {
  set_has_filepathname();
  if (filepathname_ == &::google::protobuf::internal::kEmptyString) {
    filepathname_ = new ::std::string;
  }
  filepathname_->assign(value);
}
inline void MsgFile::set_filepathname(const char* value) {
  set_has_filepathname();
  if (filepathname_ == &::google::protobuf::internal::kEmptyString) {
    filepathname_ = new ::std::string;
  }
  filepathname_->assign(value);
}
inline void MsgFile::set_filepathname(const char* value, size_t size) {
  set_has_filepathname();
  if (filepathname_ == &::google::protobuf::internal::kEmptyString) {
    filepathname_ = new ::std::string;
  }
  filepathname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgFile::mutable_filepathname() {
  set_has_filepathname();
  if (filepathname_ == &::google::protobuf::internal::kEmptyString) {
    filepathname_ = new ::std::string;
  }
  return filepathname_;
}
inline ::std::string* MsgFile::release_filepathname() {
  clear_has_filepathname();
  if (filepathname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filepathname_;
    filepathname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgFile::set_allocated_filepathname(::std::string* filepathname) {
  if (filepathname_ != &::google::protobuf::internal::kEmptyString) {
    delete filepathname_;
  }
  if (filepathname) {
    set_has_filepathname();
    filepathname_ = filepathname;
  } else {
    clear_has_filepathname();
    filepathname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string fileData = 10;
inline bool MsgFile::has_filedata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgFile::set_has_filedata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgFile::clear_has_filedata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgFile::clear_filedata() {
  if (filedata_ != &::google::protobuf::internal::kEmptyString) {
    filedata_->clear();
  }
  clear_has_filedata();
}
inline const ::std::string& MsgFile::filedata() const {
  return *filedata_;
}
inline void MsgFile::set_filedata(const ::std::string& value) {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  filedata_->assign(value);
}
inline void MsgFile::set_filedata(const char* value) {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  filedata_->assign(value);
}
inline void MsgFile::set_filedata(const char* value, size_t size) {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  filedata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgFile::mutable_filedata() {
  set_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    filedata_ = new ::std::string;
  }
  return filedata_;
}
inline ::std::string* MsgFile::release_filedata() {
  clear_has_filedata();
  if (filedata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filedata_;
    filedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgFile::set_allocated_filedata(::std::string* filedata) {
  if (filedata_ != &::google::protobuf::internal::kEmptyString) {
    delete filedata_;
  }
  if (filedata) {
    set_has_filedata();
    filedata_ = filedata;
  } else {
    clear_has_filedata();
    filedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgFile_TYPE>() {
  return ::MsgFile_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msgFile_2eproto__INCLUDED
