// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgFile.proto
#pragma warning(disable: 4627 4244 4267 4996)

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msgFile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFile_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgFile_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msgFile_2eproto() {
  protobuf_AddDesc_msgFile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msgFile.proto");
  GOOGLE_CHECK(file != NULL);
  MsgFile_descriptor_ = file->message_type(0);
  static const int MsgFile_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFile, filetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFile, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFile, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFile, filetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFile, file7z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFile, filepathname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFile, filedata_),
  };
  MsgFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFile_descriptor_,
      MsgFile::default_instance_,
      MsgFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFile));
  MsgFile_TYPE_descriptor_ = MsgFile_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msgFile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFile_descriptor_, &MsgFile::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msgFile_2eproto() {
  delete MsgFile::default_instance_;
  delete MsgFile_reflection_;
}

void protobuf_AddDesc_msgFile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmsgFile.proto\"\301\001\n\007MsgFile\022\037\n\010fileType\030"
    "\001 \002(\0162\r.MsgFile.TYPE\022\020\n\010fileName\030\002 \002(\t\022\020"
    "\n\010fileSize\030\003 \001(\004\022\020\n\010fileTime\030\004 \001(\003\022\016\n\006fi"
    "le7z\030\005 \002(\010\022\024\n\014filePathName\030\t \001(\t\022\020\n\010file"
    "Data\030\n \001(\t\"\'\n\004TYPE\022\010\n\004FILE\020\000\022\007\n\003DIR\020\001\022\014\n"
    "\010NotExist\020\002", 211);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msgFile.proto", &protobuf_RegisterTypes);
  MsgFile::default_instance_ = new MsgFile();
  MsgFile::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msgFile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msgFile_2eproto {
  StaticDescriptorInitializer_msgFile_2eproto() {
    protobuf_AddDesc_msgFile_2eproto();
  }
} static_descriptor_initializer_msgFile_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgFile_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFile_TYPE_descriptor_;
}
bool MsgFile_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgFile_TYPE MsgFile::FILE;
const MsgFile_TYPE MsgFile::DIR;
const MsgFile_TYPE MsgFile::NotExist;
const MsgFile_TYPE MsgFile::TYPE_MIN;
const MsgFile_TYPE MsgFile::TYPE_MAX;
const int MsgFile::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgFile::kFileTypeFieldNumber;
const int MsgFile::kFileNameFieldNumber;
const int MsgFile::kFileSizeFieldNumber;
const int MsgFile::kFileTimeFieldNumber;
const int MsgFile::kFile7ZFieldNumber;
const int MsgFile::kFilePathNameFieldNumber;
const int MsgFile::kFileDataFieldNumber;
#endif  // !_MSC_VER

MsgFile::MsgFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgFile::InitAsDefaultInstance() {
}

MsgFile::MsgFile(const MsgFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgFile::SharedCtor() {
  _cached_size_ = 0;
  filetype_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filesize_ = GOOGLE_ULONGLONG(0);
  filetime_ = GOOGLE_LONGLONG(0);
  file7z_ = false;
  filepathname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFile::~MsgFile() {
  SharedDtor();
}

void MsgFile::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filepathname_ != &::google::protobuf::internal::kEmptyString) {
    delete filepathname_;
  }
  if (filedata_ != &::google::protobuf::internal::kEmptyString) {
    delete filedata_;
  }
  if (this != default_instance_) {
  }
}

void MsgFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFile_descriptor_;
}

const MsgFile& MsgFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgFile_2eproto();
  return *default_instance_;
}

MsgFile* MsgFile::default_instance_ = NULL;

MsgFile* MsgFile::New() const {
  return new MsgFile;
}

void MsgFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    filetype_ = 0;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    filesize_ = GOOGLE_ULONGLONG(0);
    filetime_ = GOOGLE_LONGLONG(0);
    file7z_ = false;
    if (has_filepathname()) {
      if (filepathname_ != &::google::protobuf::internal::kEmptyString) {
        filepathname_->clear();
      }
    }
    if (has_filedata()) {
      if (filedata_ != &::google::protobuf::internal::kEmptyString) {
        filedata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgFile.TYPE fileType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgFile_TYPE_IsValid(value)) {
            set_filetype(static_cast< ::MsgFile_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fileName;
        break;
      }

      // required string fileName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fileSize;
        break;
      }

      // optional uint64 fileSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fileTime;
        break;
      }

      // optional int64 fileTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filetime_)));
          set_has_filetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_file7z;
        break;
      }

      // required bool file7z = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file7z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &file7z_)));
          set_has_file7z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_filePathName;
        break;
      }

      // optional string filePathName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filePathName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepathname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filepathname().data(), this->filepathname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_fileData;
        break;
      }

      // optional string fileData = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filedata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filedata().data(), this->filedata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .MsgFile.TYPE fileType = 1;
  if (has_filetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->filetype(), output);
  }

  // required string fileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }

  // optional uint64 fileSize = 3;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->filesize(), output);
  }

  // optional int64 fileTime = 4;
  if (has_filetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->filetime(), output);
  }

  // required bool file7z = 5;
  if (has_file7z()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->file7z(), output);
  }

  // optional string filePathName = 9;
  if (has_filepathname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepathname().data(), this->filepathname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->filepathname(), output);
  }

  // optional string fileData = 10;
  if (has_filedata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filedata().data(), this->filedata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->filedata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgFile.TYPE fileType = 1;
  if (has_filetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->filetype(), target);
  }

  // required string fileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional uint64 fileSize = 3;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->filesize(), target);
  }

  // optional int64 fileTime = 4;
  if (has_filetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->filetime(), target);
  }

  // required bool file7z = 5;
  if (has_file7z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->file7z(), target);
  }

  // optional string filePathName = 9;
  if (has_filepathname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepathname().data(), this->filepathname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->filepathname(), target);
  }

  // optional string fileData = 10;
  if (has_filedata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filedata().data(), this->filedata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->filedata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgFile.TYPE fileType = 1;
    if (has_filetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetype());
    }

    // required string fileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint64 fileSize = 3;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filesize());
    }

    // optional int64 fileTime = 4;
    if (has_filetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filetime());
    }

    // required bool file7z = 5;
    if (has_file7z()) {
      total_size += 1 + 1;
    }

    // optional string filePathName = 9;
    if (has_filepathname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepathname());
    }

    // optional string fileData = 10;
    if (has_filedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filedata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFile::MergeFrom(const MsgFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filetype()) {
      set_filetype(from.filetype());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_filetime()) {
      set_filetime(from.filetime());
    }
    if (from.has_file7z()) {
      set_file7z(from.file7z());
    }
    if (from.has_filepathname()) {
      set_filepathname(from.filepathname());
    }
    if (from.has_filedata()) {
      set_filedata(from.filedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFile::CopyFrom(const MsgFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  return true;
}

void MsgFile::Swap(MsgFile* other) {
  if (other != this) {
    std::swap(filetype_, other->filetype_);
    std::swap(filename_, other->filename_);
    std::swap(filesize_, other->filesize_);
    std::swap(filetime_, other->filetime_);
    std::swap(file7z_, other->file7z_);
    std::swap(filepathname_, other->filepathname_);
    std::swap(filedata_, other->filedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFile_descriptor_;
  metadata.reflection = MsgFile_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
